//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.WeatherService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Weather", Namespace="http://schemas.datacontract.org/2004/07/Services")]
    [System.SerializableAttribute()]
    public partial class Weather : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconPathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string cityNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string conditionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string tempField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IconPath {
            get {
                return this.IconPathField;
            }
            set {
                if ((object.ReferenceEquals(this.IconPathField, value) != true)) {
                    this.IconPathField = value;
                    this.RaisePropertyChanged("IconPath");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cityName {
            get {
                return this.cityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cityNameField, value) != true)) {
                    this.cityNameField = value;
                    this.RaisePropertyChanged("cityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string condition {
            get {
                return this.conditionField;
            }
            set {
                if ((object.ReferenceEquals(this.conditionField, value) != true)) {
                    this.conditionField = value;
                    this.RaisePropertyChanged("condition");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string temp {
            get {
                return this.tempField;
            }
            set {
                if ((object.ReferenceEquals(this.tempField, value) != true)) {
                    this.tempField = value;
                    this.RaisePropertyChanged("temp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WeatherService.IGetWeather")]
    public interface IGetWeather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetWeather/GetWeatherByGeoId", ReplyAction="http://tempuri.org/IGetWeather/GetWeatherByGeoIdResponse")]
        Client.WeatherService.Weather GetWeatherByGeoId(string CityName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IGetWeather/GetWeatherByGeoId", ReplyAction="http://tempuri.org/IGetWeather/GetWeatherByGeoIdResponse")]
        System.Threading.Tasks.Task<Client.WeatherService.Weather> GetWeatherByGeoIdAsync(string CityName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IGetWeatherChannel : Client.WeatherService.IGetWeather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetWeatherClient : System.ServiceModel.ClientBase<Client.WeatherService.IGetWeather>, Client.WeatherService.IGetWeather {
        
        public GetWeatherClient() {
        }
        
        public GetWeatherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public GetWeatherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetWeatherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public GetWeatherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Client.WeatherService.Weather GetWeatherByGeoId(string CityName) {
            return base.Channel.GetWeatherByGeoId(CityName);
        }
        
        public System.Threading.Tasks.Task<Client.WeatherService.Weather> GetWeatherByGeoIdAsync(string CityName) {
            return base.Channel.GetWeatherByGeoIdAsync(CityName);
        }
    }
}
